class Solution:
    def countSquares(self,matrix:List[List[int]]): -> int:

    count = matrix.count(1)
    count = 0
    for r  in  range(len(matrix)):
        for c in  range(len(matrix[0])):
            if matrix[r][c]== 1 :
                count+= 1
            if r== 0 or c==0: continue



            old_val = matrix[r][c]
            matrix[r][c]=min(matrix[r-1][c-1],matrix[r][c-1],matrix[r-1][c])+1 if matrix [r][c]==1
            else 0
            count= count+matrix[r][c]- old_val
    return count


#обяснениеПервым шагом создается класс Solution, внутри которого определяется метод countSquares. Метод принимает в качестве аргумента матрицу matrix, которая представляет собой список списков целых чисел.

#Затем создается переменная count и инициализируется нулем. Она будет использоваться для подсчета общего количества найденных квадратов.

#Далее следует двойной цикл for, который проходит по всем элементам матрицы. Если текущий элемент равен 1, то к переменной count добавляется 1.

#Затем проверяется, не является ли текущий элемент матрицы граничным. Если текущий элемент матрицы находится на грани матрицы, то мы переходим к следующей итерации цикла.

#Если текущий элемент не находится на грани матрицы, то сохраняем его предыдущее значение в переменной old_val, и затем изменяем его значение на минимальное значение между элементами слева, сверху и слева сверху от текущей ячейки, увеличенное на 1. Если текущий элемент матрицы не равен 1, то значение ячейки не изменяется.

#Таким образом, мы строим квадрат со стороной 2, затем квадрат со стороной 3 и т.д., пока не найдем все квадраты в матрице.

#Затем мы добавляем разницу между новым значением ячейки и ее старым значением к переменной count.

#Наконец, мы возвращаем значение переменной count, которое представляет собой общее количество квадратов со стороной 1 в матрице.

#Таким образом, код решает задачу подсчета количества квадратов со стороной 1 в матрице, используя подход динамического программирования.



