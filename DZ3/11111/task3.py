class Solution:
    def rob(self, nums:List[int]): -> int:
    if len(nums)<=2:
        return max(nums)
    def helper(nums):
        h1,h2 =0,0
        for n in nums:
            h_n = max(n+h1,h2)
            h1 = h2
            h2 = h_n
        return h_n
    return max(helper(nums[1:]),helper(nums[:len(nums)-1]))

#Объяснение
#1.Создается класс Solution, в котором определен метод rob.
#2.Метод принимает на вход список nums, содержащий значения, соответствующие количеству денег в каждом из домов.
#3.Если в списке nums меньше или равно двух элементов, мы просто возвращаем максимальное значение из этого списка.
#4.Если в списке больше двух элементов, то мы определяем вспомогательную функцию helper, которая будет решать задачу для частей списка nums.
#5.Функция helper принимает на вход список nums и возвращает максимальное количество денег, которое можно украсть из этого списка.
#6.В функции helper мы используем две переменные h1 и h2, которые инициализируем значением 0.
#7.Затем мы проходим по элементам списка nums и для каждого элемента n вычисляем новое значение h_n с помощью формулы h_n = max(n+h1,h2). Затем обновляем значения переменных h1 и h2: h1 = h2 и h2 = h_n.
#8.В конце мы возвращаем последнее значение h_n, которое и будет максимальным количеством денег, которое можно украсть из списка nums.
#9.В методе rob мы находим максимальное количество денег, которое можно украсть, для двух частей списка nums: helper(nums[1:]) и helper(nums[:len(nums)-1)]). Затем мы возвращаем максимум из этих двух значений.